<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
    <header> 
        <title>Ftplet</title> 
        <authors>
            <person id="RB" name="Rana Bhattacharyya" email="rana_b@yahoo.com"/>
        </authors>
    </header> 
  <body> 
      <section>
          <title>Overview</title>
          <p>The Ftplet API is a simple API used to handle different FTP Server
             notifications. Apache FTP Server is a Ftplet container, allowing 
             administrators to deploy Ftplet to carry out a variety of complex 
             FTP event handler tasks. 
          </p>
          <p>Implementing a custom Ftplet is generally a simple task, most of 
             whose complexity lies in coding the actual work to be done by the 
             Ftplet. This is largely due to the simplicity of the Ftplet interface 
             and the fact that a DefaultFtplet class is provided as part of the 
             Ftplet package.
          </p>
          <p>The Ftplet interface supports two lifecycle methods to provide 
             initialization (the init() method) and shutdown (the destroy() method).
             Main processing is done in different notification methods, which take
             a FtpRequest object and a FtpResponse object. All the notification
             methods return FtpletEnum object to indicate the future action.
          </p>
          <p>There will be one instance of Ftplet object. Notification methods will
             be called from different connections running in different threads. So 
             Ftplet implementation has to be thread-safe. Each connection will have 
             its own request (FtpRequest) and response (FtpResponse) objects. So 
             FtpRequest and FtpRestonse objects are connection specific.
          </p>
      </section>
      
      <section>
          <title>Main Classes</title>
          <section>
              <title>FtpletEnum</title>
              <p>This class encapsulates the return values of the ftplet methods.
                 There are four static FtpletEnum values.
              </p>
              <ul>
                  <li><strong>RET_DEFAULT</strong> : This return value indicates 
                      that the next ftplet method will be called. If no other ftplet 
                      is available, the FTP server will process the request.
                  </li>
                  <li><strong>RET_NO_FTPLET</strong> : This return value indicates 
                      that the other ftplet methods will not be called but the 
                      FTP server will continue processing this request.
                  </li>
                  <li><strong>RET_SKIP</strong> : It indicates that the FTP server 
                      will skip everything. No further processing (both ftplet and server) 
                      will be done for this request.
                  </li>
                  <li><strong>RET_DISCONNECT</strong> : It indicates that the server 
                      will skip and disconnect the client. No other request from the 
                      same client will be served.
                  </li>
              </ul>
              <p>So, RET_DEFAULT &lt; RET_NO_FTPLET &lt; RET_SKIP &gt; RET_DISCONNECT</p>
              <p>If the Ftplet returns null, RET_DEFAULT is assumed.</p>
          </section>

          <section>
              <title>FtpRequest</title>
              <p>It provides the client request information to a ftplet. Ftplet 
                 notification methods will always get the same instance of FtpRequest 
                 for one connection. So the attributes set by <em>setAttribute()</em> 
                 will be always available later unless that attribute is removed. 
                 Different connections will have different FtpRequest objects. From 
                 here we can get user information, data streams, FTP command, argument, 
                 user file system view etc.
              </p>
          </section>
          
          <section>
              <title>FtpResponse</title>
              <p>Ftplets can use this to send custom code and messges to client.</p>
          </section>
          
          <section>
              <title>Ftplet</title>
              <p>There will be only one instance of Ftplet. During startup the Ftplets 
                 will be initialized. The initialization sequence is same as the Ftplet
                 sequence in the configuration. Then all notification methods will be 
                 called and when the FTP server goes down, the Ftplet will be destroyed.
                 The following method describes all the notification methods.
              </p>
              <table>
                  <tr>
                      <th>Method</th>
                      <th>Description</th>
                  </tr>
                  <tr>
                      <td>onConnect</td>
                      <td>Client connect notification method. This is the first method 
                          FTP server will call. If it returns RET_SKIP, IP restriction 
                          check, connection limit check will not be performed and the 
                          server will not send the welcome message (220). 
                      </td>
                  </tr>
                  <tr>
                      <td>onDisconnect</td>
                      <td>Client disconnect notification method. This is the last method 
                          FTP server will call. Whatever it returns, the client connection
                          will be closed.
                      </td>
                  </tr>
                  <tr>
                      <td>onLogin</td>
                      <td>Client login notification method. This will be called after the
                          user authentication. In this case the FTP server has already sent
                          the login OK (230) reply. This is called during FTP PASS request.
                      </td>
                  </tr>
                  <tr>
                      <td>onDeleteStart</td>
                      <td>Before file deletion this method will be called. Before this FTP
                          server will not check anything like file existance or permission.
                          The requested file name can be get from request argument. We can 
                          get the file object from the request file system view. This is 
                          called in DELE FTP command.
                      </td>
                  </tr>
                  <tr>
                      <td>onDeleteEnd</td>
                      <td>This method will be called if the file deletion is successful. In
                          this case the FTP server has already sent the command OK (250) 
                          message. If onDeleteStart() method returns RET_SKIP or RET_DISCONNECT, 
                          this method will not be called by the FTP server. This is called
                          in DELE FTP command.
                      </td>
                  </tr>
                  <tr>
                      <td>onUploadStart</td>
                      <td>This method will be called before the file upload. The file name
                          can be get from the request argument. We can get the data input
                          stream from request. This will be called before the permission 
                          check. This is called during STOR command.
                      </td>
                  </tr>
                  <tr>
                      <td>onUploadEnd</td>
                      <td>This notification method will be called to indicate that the file
                          transfer is successful and the server has send the replies. In case
                          of any error this method will not be called. If onUploadStart() 
                          returns RET_SKIP or RET_DISCONNECT, this method will not be called
                          by the FTP server. This is called in STOR command.
                      </td>
                  </tr>
                  <tr>
                      <td>onDownloadStart</td>
                      <td>This is file download request notification method called during 
                          RETR command. This will be called before the file download. We
                          can get the file name argument from request. Similarly, the 
                          data output stream can be get from the request. This will be called
                          before the file existance and permissoin check.
                      </td>
                  </tr>
                  <tr>
                      <td>onDownloadEnd</td>
                      <td>This notification method will be called to indicate that the file
                          transfer is successful and the server has send the replies in RETR
                          command. In case of any error this method will not be called. If 
                          onDownloadStart() returns RET_SKIP or RET_DISCONNECT, this method 
                          will not be called by the FTP server.
                      </td>
                  </tr>
                  <tr>
                      <td>onRmdirStart</td>
                      <td>Before directory deletion this method will be called during RMD 
                          command. Before this FTP server will not check anything like 
                          directory existance or permission. The requested directory name 
                          can be get from request argument. 
                      </td>
                  </tr>
                  <tr>
                      <td>onRmdirEnd</td>
                      <td>This method will be called if the directory deletion is successful
                          in RMD command. In this case the FTP server has already sent the 
                          command OK (250) message. If onRmdirStart() method returns RET_SKIP
                          or RET_DISCONNECT, this method will not be called by the FTP server.
                      </td>
                  </tr>
                  <tr>
                      <td>onMkdirStart</td>
                      <td>Before directory creation this method will be called during MKD 
                          command. Before this FTP server will not check anything like 
                          directory existance or permission. The requested directory name 
                          can be get from request argument. 
                      </td>
                  </tr>
                  <tr>
                      <td>onMkdirEnd</td>
                      <td>This method will be called if the directory creation is successful
                          in MKD command. In this case the FTP server has already sent the 
                          command OK (250) message. If onMkdirStart() method returns RET_SKIP
                          or RET_DISCONNECT, this method will not be called by the FTP server.
                      </td>
                  </tr>
                  <tr>
                      <td>onAppendStart</td>
                      <td>This is file append request notification method called in APPE
                          command. The file name can be get from the request argument. 
                          We can get the data input stream from request. This will be called 
                          before the permission check.
                      </td>
                  </tr>
                  <tr>
                      <td>onAppendEnd</td>
                      <td>This is file append success notification method called in APPE
                          command. This notification method will be called to indicate 
                          that the file transfer is successful and the server has send 
                          the replies. In case of any error this method will not be called. 
                          If onAppendStart() returns RET_SKIP or RET_DISCONNECT, this method 
                          will not be called by the FTP server.
                      </td>
                  </tr>
                  <tr>
                      <td>onUploadUniqueStart</td>
                      <td>This is unique file create request notification method called in 
                          STOU command. We can get the data input stream from request. 
                          This will be called before the permission check.
                      </td>
                  </tr>
                  <tr>
                      <td>onUploadUniqueEnd</td>
                      <td>This is unique file create success notification method called in 
                          STOU command. This notification method will be called to indicate 
                          that the file transfer is successful and the server has send 
                          the replies. In case of any error this method will not be called. 
                          If onUploadUniqueStart() returns RET_SKIP or RET_DISCONNECT, this 
                          method will not be called by the FTP Server.
                      </td>
                  </tr>
                  <tr>
                      <td>onRenameStart</td>
                      <td>This is file rename start notification method called in RNFR
                          command. This will be called before the file existance or 
                          permission check. The &quot;rename from&quot; file object
                          can be get from request object.
                      </td>
                  </tr>
                  <tr>
                      <td>onRenameEnd</td>
                      <td>This is file rename success notification method called in RNFR
                          command. This will be called before the file existance or 
                          permission check. The &quot;rename from&quot; file object
                          can be get from request object. This notification method will 
                          be called to indicate that the file rename is successful and 
                          the server has send the success reply (250). In case of any error 
                          this method will not be called. If onRenameStart() returns RET_SKIP 
                          or RET_DISCONNECT, this method will not be called by the FTP Server.
                      </td>
                  </tr>
                  <tr>
                      <td>onSite</td>
                      <td>This is SITE command start notification method. It gives a chance
                          to implement custom SITE command. If this method returns RET_SKIP
                          or RET_DISCONNECT, the existing SITE commands will not be executed.
                      </td>
                  </tr>
              </table>     
          </section>
          
          <section>
              <title>Configuration</title>
              <p>Ftplet will get the Ftplet specific configuration as the init() 
                 method argument. 
              </p>
          </section>
          
          <section>
              <title>FtpConfig</title>
              <p>It encapsulates the FTP server (or Ftplet container). This object 
                 is passed to Ftplet during initialization. A Ftplet can get logger,
                 user manager, ftle system manager, server statistics information
                 from FtpConfig.
              </p>
          </section>
          
      </section>
      
      <section>
          <title>Configuration</title>
          <p>First of all, we have to decide a descriptive name for a Ftplet. 
             We specify all the Ftplet names (comma separated) in 
             <em>config.ftplets</em> configuration parameter. The Ftplet name
             must not contain any whitespace character, comma or semicolon. If
             we have three Ftplets (say f1, f2 and f3), the configuration will
             look like:
          </p>
          <source>
              config.ftplets=f1,f2,f3
          </source>
          <p>The next thing is to specify the fully qualified Ftplet class name. 
             if in the above case the class name of the Ftplet f1 is 
             &quot;com.yourdomain.Ftplet1&quot; the configuration will be:     
          </p>
          <source>
              config.ftplet.f1.class=com.yourdomain.Ftplet1
          </source>
          <p>Similarly, you can add other Ftplet specific configuration
             parameters.
          </p>
          <source>
              config.ftplet.f1.param1=val1
              config.ftplet.f1.param2=val2
              ....
          </source>
      </section>
      
      <section>
          <title>Deployment</title>
          <p>The Ftplet must be added to Apache FTP Server classpath so that 
             the Ftplet can be loaded. Edit ftpd or ftpd_ui scripts to modify
             CUSTOM_CLASSPATH environment variable. Of course before that you
             need to uncomment it.
          </p>
      </section>
  </body>
</document>
