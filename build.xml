<?xml version="1.0"?>
<!-- 
  ==============================================================================
  $Id$
  FTP server build file
  Legal:
  Copyright (c) 1999-2002 The Apache Software Foundation. All Rights Reserved.
  ==============================================================================
 -->
<project default="usage" basedir=".">
    <!--
      Give user a chance to override without editing this file
      (and without typing -D each time he compiles it)
    -->
    <property file=".ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property name="name" value="ftpserver"/>
    <property name="Name" value="FtpServer"/>
    <property name="admin.name" value="ftp-admin"/>
    <property name="version" value="1.0"/>
    <property name="year" value="1999-2003"/>

    <!-- 
       There should be no need to override default compiler but need to change
       javac task to run without this 
    -->
    <property name="build.compiler" value="modern"/>
    
    <!--
      these are here only for those who use jikes compiler. For other
      developers this part makes no difference.
    -->
    <property name="build.compiler.emacs" value="on"/>
    <property name="build.compiler.pedantic" value="true"/>
    <property name="build.compiler.depend" value="true"/>
    <property name="build.compiler.fulldepend" value="true"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <!--
       Set the properties for intermediate directories
    -->
    <property name="build.dir" value="build"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.javadocs" value="${build.dir}/javadocs"/>
    <property name="build.docs" value="${build.dir}/docs"/>
    <property name="build.conf" value="${build.dir}/conf"/>

    <!--
       Set the properties for source directories and parameters
    -->
    <property name="src.dir" value="src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="conf.dir" value="${src.dir}/conf"/>
    <property name="manifest.src" value="${src.dir}/manifest"/>
    <property name="xdocs.dir" value="${src.dir}/xdocs"/>
    <property name="docs.src" value="${xdocs.dir}"/>

    <!--
       Set the properties for the distribution directories
    -->
    <property name="dist.base" value="dist"/>
    <property name="dist.name" value="${name}-${version}"/>
    <property name="dist.dir" value="${dist.base}/${dist.name}"/>
    <property name="dist.bin" value="${dist.dir}/bin"/>
    <property name="dist.binary.dir" value="${dist.dir}/downloads/bin"/>
    <property name="dist.source.dir" value="${dist.dir}/downloads/src"/>

    <!--
       Third party binary directories
    -->
    <property name="lib.dir" value="lib"/>
    <property name="phoenix.dir" value="phoenix-bin"/>
    <property name="phoenix.lib.dir" value="${phoenix.dir}/lib"/>

    <!--
       Set the properties for the website directories
    -->
    <property name="www.dir" value="www"/>

    <!--
       Set the classpath
    -->
    <path id="project.class.path">
        <pathelement path="${java.class.path}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/buildtime">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${phoenix.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${build.classes}"/>
    </path>

    
    <!--
       Task definitions
    -->
    <taskdef name="sar" classname="org.apache.avalon.phoenix.tools.tasks.Sar">
        <classpath refid="project.class.path"/>
    </taskdef>

    <taskdef name="generatemeta" classname="org.apache.avalon.phoenix.tools.metagenerate.MetaGenerateTask">
        <classpath refid="project.class.path" />
    </taskdef>


    <!--
       ===================================================================
                              Display usage
       ===================================================================
    -->
    <target name="usage">
        <echo message=""/>
        <echo message="${Name} Build file"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message="   dist-lite --> generates unpacked distribution "/>
        <echo message="   website   --> makes all the docs and javadocs"/>
        <echo message="   compile   --> compiles the source code"/>
        <echo message="   dist      --> generates all the ${name} distributions, packed"/>
        <echo message="   clean     --> cleans up the directory"/>
        <echo message="   xdocs     --> creates the documentaion for the ${name}"/>
        <echo message="   javadocs  --> creates the Javadoc"/>
        <echo message=""/>
        <echo message=" See the comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
    </target>


    <!--
       ===================================================================
        Prepare-common target - common tasks executed in preparation for
        all targets
       ===================================================================
     -->
    <target name="prepare-common">
    <echo message="Preparing code"/>
        <tstamp/>
        <available file="${phoenix.dir}/bin" type="dir" property="phoenix.bin.present"/>
        <mkdir dir="${dist.dir}"/>
        <copy todir="${dist.dir}">
            <fileset dir=".">
                <include name="LICENSE"/>
                <include name="README"/>
            </fileset>
        </copy>
        <!-- is this necessary ? - PaulH
        <fixcrlf srcdir="${java.dir}" includes="**/*.java" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${java.dir}" includes="**/*.minfo" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${java.dir}" includes="**/*.xinfo" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${java.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${xdocs.dir}" includes="**/*.xml" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${conf.dir}" includes="**/*.xml" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="." includes="build.sh" eol="lf"/>
        <fixcrlf srcdir="." includes="build.bat" eol="crlf"/>
        <fixcrlf srcdir="." includes="build.xml" eol="lf"/>

        <chmod perm="+x">
            <fileset dir=".">
                <include name="build.sh"/>
            </fileset>
        </chmod>
        -->        
    </target>


    <!--
       ===================================================================
         Copy files, set permissions and line feeds for the packaged Phoenix distribution
       ===================================================================
    -->
    <target name="prepare-phoenix" depends="prepare-common" if="phoenix.bin.present">
        <echo message="Phoenix distribution present - adjusting linefeeds and permissions, copying files"/>
        
        <fixcrlf srcdir="${phoenix.dir}/bin" includes="phoenix.sh" eol="lf"/>
        <copy todir="${dist.dir}">
            <fileset dir="${phoenix.dir}">
                <exclude name="CVS/**"/>
            </fileset>
        </copy>
        <fixcrlf srcdir="${dist.bin}" includes="run.sh" eol="lf"/>
        <fixcrlf srcdir="${dist.bin}" includes="run.bat" eol="crlf"/>
        <chmod perm="+x">
            <fileset dir="${dist.bin}">
                <include name="run.sh"/>
                <include name="phoenix.sh"/>
            </fileset>
        </chmod>
    </target>


    <!--
       ===================================================================
                                  Prepare target
       ===================================================================
    -->
    <target name="prepare" depends="prepare-common,prepare-phoenix"/>


    <!--
       ===================================================================
                                  Compile
       ===================================================================
    -->
    <target name="compile" depends="prepare">
        <echo message="Compiling ${Name} Java sources"/>
        <available property="jndi.present" classname="javax.naming.InitialContext"/>
        <mkdir dir="${build.classes}"/>
        <javac destdir="${build.classes}" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}">
            <classpath refid="project.class.path"/>
            <src path="${java.dir}"/>
            <exclude name="org/apache/avalon/${name}/usermanager/LdapUserManager.java" unless="jndi.present"/>
        </javac>
        
        <rmic base="${build.classes}" classpathref="project.class.path"  includes="**/${name}/remote/*.class,**/gui/remote/*.class"/>

        <copy todir="${build.classes}">
            <fileset dir="${java.dir}">
                <exclude name="**/*.java"/>
                <exclude name="**/CVS/*"/>
            </fileset>
        </copy>

        <generatemeta dest="${build.classes}">
            <fileset dir="${java.dir}">
                <include name="**/*.java" />
            </fileset>
        </generatemeta>
    </target>


    <!--
       ===================================================================
                                     Javadocs
       ===================================================================
    -->
    <target name="javadocs">
    <echo message="Making Javadocs"/>
        <delete dir="${build.javadocs}"/>
        <mkdir dir="${build.javadocs}"/>
        <javadoc packagenames="org.apache.*" sourcepath="${java.dir}" destdir="${build.javadocs}">
            <classpath refid="project.class.path"/>
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-use"/>
                <param name="-breakiterator"/>
                <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api"/>
                <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api"/>
                <param name="-link" value="http://jakarta.apache.org/avalon/api"/>
                <param name="-link" value="http://jakarta.apache.org/avalon/phoenix/api"/>
                <param name="-link" value="http://jakarta.apache.org/avalon/cornerstone/api"/>
                <param name="-link" value="http://jakarta.apache.org/avalon/logkit/api"/>
                <param name="-doctitle" value="${Name} ${version}"/>
                <param name="-windowtitle" value="${Name} API"/>
                <param name="-bottom" value="&quot;Copyright &#169; ${year} Apache Jakarta Project. All Rights Reserved.&quot;"/>
            </doclet>
        </javadoc>
    </target>


    <!--
       ===================================================================
                                  Build xdocs
       ===================================================================
    -->
    <target name="xdocs" depends="prepare">
        <style style="${docs.src}/stylesheets/site.xsl"
                basedir="${docs.src}/"
                destdir="${build.docs}/" 
                includes="**/*.xml" >
        </style>
        <copy todir="${build.docs}" filtering="no">
            <fileset dir="${docs.src}">
                <include name="**/*.css"/>
                <include name="**/*.txt"/>
            </fileset>
        </copy>
        <copy todir="${build.docs}/images" filtering="no">
            <fileset dir="${docs.src}/images">
                <include name="**/*.gif"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.jpg"/>
                <include name="**/*.png"/>
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/docs"/>
        <copy todir="${dist.dir}/docs" filtering="no">
            <fileset dir="${build.docs}"/>
        </copy>
    </target>


    <!--
       ===================================================================
                                build website 
       ===================================================================
    -->
    <target name="website" depends="xdocs,javadocs">
        <echo message="preparing website in ${www.dir}"/>
        <delete>
            <fileset dir="${www.dir}">
                <exclude name="CVS/**"/>
                <exclude name="rfclist/**"/>
                <exclude name="javadocs/**"/>
            </fileset>
        </delete>
        <mkdir dir="${www.dir}"/>
        <copy todir="${www.dir}" filtering="no">
            <fileset dir="${build.docs}"/>
        </copy>
        <copy todir="${www.dir}" filtering="no">
            <fileset dir="${build.dir}">
                <include name="javadocs/**"/>
            </fileset>
        </copy>
        <fixcrlf srcdir="${www.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
        <fixcrlf srcdir="${www.dir}" includes="**/*.css" eol="lf" tab="remove" tablength="4" />
    </target>


    <!--
       ===================================================================
                            Build everything
       ===================================================================
    -->
    <target name="everything" depends="clean,website,dist"/>


    <!--
       ===================================================================
                          Build all distributions
       ===================================================================
    -->
    <target name="dist" depends="dist-bin,dist-src"/>


    <!--
       ===================================================================
                       Make sar and admin jar files
       ===================================================================
    -->
    <target name="jar" depends="compile">
    <echo message="Making ${Name} Sarfile (${name}.sar)"/>

        <!-- builds ftp server jar file -->
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${build.lib}/${name}.jar" basedir="${build.classes}">
            <exclude name="**/gui/*"/>
            <exclude name="**/gui/help/*"/>
        </jar>

        <!-- make sar file -->
        <sar sarfile="${build.lib}/${name}.sar" config="${conf.dir}/config.xml" environment="${conf.dir}/environment.xml" assembly="${conf.dir}/assembly.xml">
            <lib dir="${build.lib}/">
                <include name="*.jar"/>
            </lib>
            <lib dir="lib">
                <include name="*.jar"/>
            </lib>
        </sar>

        <!-- remote admin jar file -->
        <jar jarfile="${build.lib}/${admin.name}.jar" manifest="${manifest.src}/ftp-admin.mf">
            <fileset dir="${build.classes}">
                <include name="**/gui/**"/>
                <include name="**/${name}/remote/**"/>
                <include name="**/${name}/FtpUser.class"/>
                <include name="**/usermanager/User.class"/>
                <include name="**/usermanager/UserManagerInterface.class"/>
                <include name="**/ip/IpRestrictorInterface.class"/>
                <include name="**/util/*"/>
            </fileset>
        </jar>
    </target>


    <!--
       ===================================================================
                 Make dist directory with unpacked dist ready to run
       ===================================================================
    -->
    <target name="dist-lite" depends="jar">
    <echo message="Installing ${Name} to ${dist.dir}"/>

        <!--installs sar into ./dist/ ready to test-->
        <copy file="${build.lib}/${name}.sar" todir="${dist.dir}/apps"/>
        
    </target>
    

    <!--
       ===================================================================
                                  binary distributions
       ===================================================================
    -->
    <target name="dist-bin-phoenix-warn" depends="dist-bin-common" unless="phoenix.bin.present">
        <echo message ="The Phoenix distribution is not present - the ${Name} w/Phoenix binary distribution will not be built."/>
    </target>

    <target name="dist-bin-phoenix" depends="dist-bin-common" if="phoenix.bin.present">
        <echo message ="Building binary w/Phoenix distributions"/>
        <zip zipfile="${dist.binary.dir}/${name}-binary-${version}.zip">
            <fileset dir="dist">
                <include name="${name}-${version}/**"/>
                <exclude name="${name}-${version}/downloads/**"/>
                <include name="release-notes.txt"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.binary.dir}/${name}-binary-${version}.tar">
            <tarfileset dir="dist" username="${name}" group="${name}">
                <include name="${name}-${version}/**"/>
                <exclude name="${name}-${version}/downloads/**"/>
                <include name="release-notes.txt"/>
                <include name="LICENSE.txt"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.binary.dir}/${name}-binary-${version}.tar.gz" src="${dist.binary.dir}/${name}-binary-${version}.tar"/>
        <delete file="${dist.binary.dir}/${name}-binary-${version}.tar"/>
    </target>

    <target name="dist-bin-common" depends="dist-lite,xdocs,javadocs">
        <echo message ="Building binary distributions"/>
        
        <mkdir dir="${dist.binary.dir}"/>
        <copy file="${dist.dir}/apps/${name}.sar" todir="${dist.binary.dir}"/>
        <copy file="${build.lib}/${admin.name}.jar" todir="${dist.binary.dir}"/>
    </target>

    <target name="dist-bin" depends="dist-bin-common,dist-bin-phoenix-warn,dist-bin-phoenix"/>


    <!--
       ===================================================================
                                  source distributions
       ===================================================================
    -->
    <target name="dist-src-phoenix-warn" depends="dist-src-common" unless="phoenix.bin.present">
        <echo message ="The Phoenix distribution is not present."/> 
        <echo message="The ${name} source distribution with Phoenix binaries will not be built."/>
    </target>

    <target name="dist-src-phoenix" depends="dist-src-common" if="phoenix.bin.present">
        <!--Source With Phoenix -->
        <echo message ="Building source distributions with Phoenix binaries"/>
        <zip zipfile="${dist.source.dir}/${name}-with-phoenix-${version}-src.zip">
            <fileset dir=".">
                <include name="${dist.dir}/**"/>
                <exclude name="${dist.dir}/downloads/**"/>
                <exclude name="${dist.dir}/apps/*.sar"/>
                <exclude name=""/>
                <include name="*.txt"/>
                <include name="*.xml"/>
                <include name="KEYS"/>
                <include name="README"/>
                <include name="build.*"/>
                <include name="lib/**"/>
                <include name="${phoenix.dir}/**"/>
                <include name="src/**"/>
                <include name="tools/**"/>
                <include name="www/**"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar">
            <tarfileset dir="." username="${name}" group="${name}">
                <include name="${dist.dir}/**"/>
                <exclude name="${dist.dir}/downloads/**"/>
                <exclude name="${dist.dir}/apps/*.sar"/>
                <include name="*.txt"/>
                <include name="*.xml"/>
                <include name="KEYS"/>
                <include name="README"/>
                <include name="build.*"/>
                <include name="lib/**"/>
                <include name="${phoenix.dir}/**"/>
                <include name="src/**"/>
                <include name="tools/**"/>
                <include name="www/**"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar.gz" src="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar"/>
        <delete file="${dist.source.dir}/${name}-with-phoenix-${version}-src.tar"/>
    </target>

    <target name="dist-src-common" depends="dist-lite,xdocs,javadocs">
        <echo message ="Building source distributions"/>
        <mkdir dir="${dist.source.dir}"/>
        <zip zipfile="${dist.source.dir}/${dist.name}-src.zip">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="${phoenix.lib.dir}/**"/>
                <include name="www/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.txt"/>
                <include name="README"/>
                <include name="KEYS"/>
                <include name="build.*"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.source.dir}/${dist.name}-src.tar">
            <tarfileset dir="." username="${name}" group="${name}">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="${phoenix.lib.dir}/**"/>
                <include name="www/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.txt"/>
                <include name="README"/>
                <include name="KEYS"/>
                <include name="build.*"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.source.dir}/${dist.name}-src.tar.gz" src="${dist.source.dir}/${dist.name}-src.tar"/>
        <delete file="${dist.source.dir}/${dist.name}-src.tar"/>
    </target>

    <target name="dist-src" depends="dist-src-common,dist-src-phoenix-warn,dist-src-phoenix"/>

    <!--
       ===================================================================
                                  delete dist/ and build/
       ===================================================================
    -->
    <target name="clean">
        <echo message ="deleting working directories ready for a clean build"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

</project>
